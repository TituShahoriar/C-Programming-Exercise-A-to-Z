

Level 4: Functions and Modular Programming

19. Write a function to calculate the area of a rectangle.

```c
#include <stdio.h>

int calculateArea(int length, int width) {
    return length * width;
}

int main() {
    int length = 5;
    int width = 3;
    int area = calculateArea(length, width);
    
    printf("The area of the rectangle is: %d\n", area);
    
    return 0;
}
```

Output:
```
The area of the rectangle is: 15
```

20. Write a function to check if a number is a prime number.

```c
#include <stdio.h>

int isPrime(int num) {
    if (num <= 1) {
        return 0;
    }
    
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) {
            return 0;
        }
    }
    
    return 1;
}

int main() {
    int num = 17;
    
    if (isPrime(num)) {
        printf("%d is a prime number.\n", num);
    } else {
        printf("%d is not a prime number.\n", num);
    }
    
    return 0;
}
```

Output:
```
17 is a prime number.
```

21. Write a program to find the factorial of a number using recursion.

```c
#include <stdio.h>

unsigned long long factorial(int num) {
    if (num == 0) {
        return 1;
    } else {
        return num * factorial(num - 1);
    }
}

int main() {
    int num = 5;
    unsigned long long fact = factorial(num);
    
    printf("Factorial of %d is: %llu\n", num, fact);
    
    return 0;
}
```

Output:
```
Factorial of 5 is: 120
```

22. Write a program to find the nth Fibonacci number using recursion.

```c
#include <stdio.h>

unsigned long long fibonacci(int n) {
    if (n <= 1) {
        return n;
    } else {
        return fibonacci(n - 1) + fibonacci(n - 2);
    }
}

int main() {
    int n = 6;
    unsigned long long fib = fibonacci(n);
    
    printf("The %dth Fibonacci number is: %llu\n", n, fib);
    
    return 0;
}
```

Output:
```
The 6th Fibonacci number is: 8
```

23. Write a program to calculate the power of a number using recursion.

```c
#include <stdio.h>

double power(double base, int exponent) {
    if (exponent == 0) {
        return 1.0;
    } else if (exponent > 0) {
        return base * power(base, exponent - 1);
    } else {
        return 1.0 / (base * power(base, -exponent - 1));
    }
}

int main() {
    double base = 2.5;
    int exponent = -3;
    double result = power(base, exponent);
    
    printf("%.2lf raised to the power of %d is: %.4lf\n", base, exponent, result);
    
    return 0;
}
```

Output:
```
2.50 raised to the power of -3 is: 0.0640
```

