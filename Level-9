Level 9: Advanced Concepts

37. Write a program to handle exceptions using the setjmp() and longjmp() functions.

```c
#include <stdio.h>
#include <setjmp.h>

jmp_buf buffer;

void divide(int dividend, int divisor) {
    if (divisor == 0) {
        printf("Error: Division by zero\n");
        longjmp(buffer, 1);
    }

    int quotient = dividend / divisor;
    printf("Quotient: %d\n", quotient);
}

int main() {
    int dividend, divisor;

    if (setjmp(buffer) == 0) {
        printf("Enter dividend: ");
        scanf("%d", &dividend);

        printf("Enter divisor: ");
        scanf("%d", &divisor);

        divide(dividend, divisor);
    }

    return 0;
}
```

Output:
```
Enter dividend: 10
Enter divisor: 2
Quotient: 5
```

38. Write a program to implement a stack using an array.

```c
#include <stdio.h>
#define MAX_SIZE 100

int stack[MAX_SIZE];
int top = -1;

void push(int value) {
    if (top == MAX_SIZE - 1) {
        printf("Stack Overflow\n");
        return;
    }

    stack[++top] = value;
    printf("Pushed %d into the stack\n", value);
}

void pop() {
    if (top == -1) {
        printf("Stack Underflow\n");
        return;
    }

    int value = stack[top--];
    printf("Popped %d from the stack\n", value);
}

int main() {
    push(1);
    push(2);
    push(3);
    push(4);

    pop();
    pop();
    pop();
    pop();
    pop();

    return 0;
}
```

Output:
```
Pushed 1 into the stack
Pushed 2 into the stack
Pushed 3 into the stack
Pushed 4 into the stack
Popped 4 from the stack
Popped 3 from the stack
Popped 2 from the stack
Popped 1 from the stack
Stack Underflow
```

39. Write a program to implement a queue using an array.

```c
#include <stdio.h>
#define MAX_SIZE 100

int queue[MAX_SIZE];
int front = -1;
int rear = -1;

void enqueue(int value) {
    if (rear == MAX_SIZE - 1) {
        printf("Queue Overflow\n");
        return;
    }

    if (front == -1)
        front = 0;

    queue[++rear] = value;
    printf("Enqueued %d into the queue\n", value);
}

void dequeue() {
    if (front == -1 || front > rear) {
        printf("Queue Underflow\n");
        return;
    }

    int value = queue[front++];
    printf("Dequeued %d from the queue\n", value);

    if (front > rear)
        front = rear = -1;
}

int main() {
    enqueue(1);
    enqueue(2);
    enqueue(3);
    enqueue(4);

    dequeue();
    dequeue();
    dequeue();
    dequeue();
    dequeue();

    return 0;
}
```

Output:
```
Enqueued 1 into the queue
Enqueued 2 into the queue
Enqueued 3 into the queue
Enqueued 4 into the queue
Dequeued 1 from the queue
Dequeued 2 from the queue
Dequeued 3 from the queue
Dequeued 4 from the queue
Queue Underflow
```

